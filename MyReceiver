package com.example.myjpush;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import cn.jpush.android.api.JPushInterface;

public class MyReceiver extends BroadcastReceiver {

	private static final String TAG="JPush";
	private  String MSG_TITLE;
	private  String MSG_CONTENT;

	@Override
	public void onReceive(Context context, Intent intent) {
		Bundle bundle=intent.getExtras();
		
		 if (JPushInterface.ACTION_REGISTRATION_ID.equals(intent.getAction())) {
	            String regId = bundle.getString(JPushInterface.EXTRA_REGISTRATION_ID);
	            Log.d(TAG, "[MyReceiver] 接收Registration Id : " + regId);
	            //send the Registration Id to your server...
	                        
	        } else if (JPushInterface.ACTION_MESSAGE_RECEIVED.equals(intent.getAction())) {
	        	Log.d(TAG, "[MyReceiver] 接收到推送下来的自定义消息: " + bundle.getString(JPushInterface.EXTRA_MESSAGE));
	        	 // 自定义消息不会展示在通知栏，完全要开发者写代码去处理
	        	processMessage(context, bundle);
	        
	        } else if (JPushInterface.ACTION_NOTIFICATION_RECEIVED.equals(intent.getAction())) {
	            Log.d(TAG, "[MyReceiver] 接收到推送下来的通知");
	            // 在这里可以做些统计，或者做些其他工作
	            int notifactionId = bundle.getInt(JPushInterface.EXTRA_NOTIFICATION_ID);
	            Log.d(TAG, "[MyReceiver] 接收到推送下来的通知的ID: " + notifactionId);           
	        	
	        } else if (JPushInterface.ACTION_NOTIFICATION_OPENED.equals(intent.getAction())) {
	            Log.d(TAG, "[MyReceiver] 用户点击打开了通知");
	           
	            JPushInterface.reportNotificationOpened(context, bundle.getString(JPushInterface.EXTRA_MSG_ID));
	         // 在这里可以自己写代码去定义用户点击后的行为
	   		 // 打开自定义的Activity
	         // 注意要在Manifest中声明TestActivity，否则会出错
	   		 Intent i=new Intent(context,TestActivity.class);
	   		 i.putExtras(bundle);
	   		 i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);//重新启动
	   		 context.startActivity(i);
	   		
	            
	        } else if (JPushInterface.ACTION_RICHPUSH_CALLBACK.equals(intent.getAction())) {
	            Log.d(TAG, "[MyReceiver] 用户收到到RICH PUSH CALLBACK: " + bundle.getString(JPushInterface.EXTRA_EXTRA));
	            //在这里根据 JPushInterface.EXTRA_EXTRA 的内容处理代码，比如打开新的Activity， 打开一个网页等..
	        	
	        } else {
	        	Log.d(TAG, "[MyReceiver] Unhandled intent - " + intent.getAction());

                //获取NotificationManager
	        	NotificationManager notificationManager=(NotificationManager)context.getSystemService(context.NOTIFICATION_SERVICE);
	        	//创建一个Notification
	        	Notification notification=new Notification();
	        	//显示图标
	        	notification.icon=R.drawable.ic_launcher;
	        	// 当前的notification被放到状态栏上的时候，提示内容
	        	notification.tickerText = "商业价值";
	        	
	        	Intent i=new Intent(context, TestActivity.class);
	        	//点击通知要跳转的Activity
	        	PendingIntent contentIntent = PendingIntent.getActivity(
	        	        context,R.string.app_name,i ,PendingIntent.FLAG_UPDATE_CURRENT);
	        	String id=(intent.getExtras()).getString("id");
	        	String title=(intent.getExtras()).getString("title");
	        	String content=(intent.getExtras()).getString("content");
	        	notification.setLatestEventInfo(context, title,content, contentIntent);
      	
	        	notificationManager.notify(0, notification);
	        	
	        	
	        }
		 
		 

}
	
	//send msg to MainActivity
		private void processMessage(Context context, Bundle bundle) {
		        
			//if (MainActivity.isForeground) {
				String message = bundle.getString(JPushInterface.EXTRA_MESSAGE);
				String extras = bundle.getString(JPushInterface.EXTRA_EXTRA);//自定义内容
				Intent msgIntent = new Intent("com.example.myjpush.MESSAGE_RECEIVED_ACTION");
				msgIntent.putExtra("message", message);
				String content;
				String id;
				String title;
				if (!isEmpty(extras)) {
					try {
						JSONObject extraJson = new JSONObject(extras);
						if (null != extraJson && extraJson.length() > 0) {
							id=extraJson.getString("id");
							title=extraJson.getString("title");
							content=extraJson.getString("content");
							msgIntent.putExtra("id", id);
							msgIntent.putExtra("title", title);
							msgIntent.putExtra("content", content);
						}
					} catch (JSONException e) {
                         Log.i("ex",e.toString());
					}

				}
				context.sendBroadcast(msgIntent);
			//}
		}
		private boolean isEmpty(String s) {
	        if (null == s)
	            return true;
	        if (s.length() == 0)
	            return true;
	        if (s.trim().length() == 0)
	            return true;
	        return false;
	    }

}
